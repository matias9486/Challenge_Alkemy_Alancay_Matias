// <auto-generated />
using System;
using Challenge.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Challenge.Migrations
{
    [DbContext(typeof(ChallengeContext))]
    partial class ChallengeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Challenge.Entities.Genero", b =>
                {
                    b.Property<int>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneroId");

                    b.ToTable("generos");
                });

            modelBuilder.Entity("Challenge.Entities.Pelicula_Serie", b =>
                {
                    b.Property<int>("Pelicula_SerieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Caliﬁcacion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Creación")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneroId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pelicula_SerieId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Peliculas_Series");
                });

            modelBuilder.Entity("Challenge.Entities.Personaje", b =>
                {
                    b.Property<int>("PersonajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Historia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.HasKey("PersonajeId");

                    b.ToTable("Personajes");
                });

            modelBuilder.Entity("Pelicula_SeriePersonaje", b =>
                {
                    b.Property<int>("Peliculas_SeriesPelicula_SerieId")
                        .HasColumnType("int");

                    b.Property<int>("Personajes_AsociadosPersonajeId")
                        .HasColumnType("int");

                    b.HasKey("Peliculas_SeriesPelicula_SerieId", "Personajes_AsociadosPersonajeId");

                    b.HasIndex("Personajes_AsociadosPersonajeId");

                    b.ToTable("Pelicula_SeriePersonaje");
                });

            modelBuilder.Entity("Challenge.Entities.Pelicula_Serie", b =>
                {
                    b.HasOne("Challenge.Entities.Genero", null)
                        .WithMany("Peliculas_Series")
                        .HasForeignKey("GeneroId");
                });

            modelBuilder.Entity("Pelicula_SeriePersonaje", b =>
                {
                    b.HasOne("Challenge.Entities.Pelicula_Serie", null)
                        .WithMany()
                        .HasForeignKey("Peliculas_SeriesPelicula_SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge.Entities.Personaje", null)
                        .WithMany()
                        .HasForeignKey("Personajes_AsociadosPersonajeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Challenge.Entities.Genero", b =>
                {
                    b.Navigation("Peliculas_Series");
                });
#pragma warning restore 612, 618
        }
    }
}
